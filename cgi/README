CGIs in this directory are accessed via http on port 80 withn URL in the
general form: 

    http://ip.ad.re.ss/cginame[?options[&...options]]

Where "cginame" is one of the executable files in this directory. The server
returns HTTP error status if the CGI exits with non-zero status or writes to
stderr.

For bash CGI's, the file cgi.inc can be included in order to:
        
    Configure the shell to abort with error upon reference to uninitialized
    variables or if any script pipeline has non-zero exit status

    Redirect stderr to stdout, so incidentalm writes to stderr do not cause
    failure (e.g. from dd). The original stderr is accessible via file handle
    9.
    
    Instantiate a die() function which can be invoked to write to stderr and
    abort the program. 

    Parse QUERY_STRING into separate bash variables $1, $2, etc. and unescapes
    all URL-encoded characters. 

    Output the "Content-type: text/plain" header so that script output is
    returned to the caller verbatim.  This can be avoided by unset-ting
    GATEWAY_INTERFACE prior to including cgi.inc. 

A script error will trigger a corresponding curl error if the -f flag is used. 

Note that CGIs can also be run from the bash command line, with options
provided as command line arguments.

These CGIs are defined:

test

    Just returns the current CGI environment. There are no options.

    Example:

    $ curl -qf http://192.168.111.1/test
    BASH=/bin/bash
    BASHOPTS=cmdhist:complete_fullquote:extquote:force_fignore:hostcomplete:interactive_comments:progcomp:promptvars:sourcepath
    BASH_ALIASES=()
    BASH_ARGC=([0]="1")
    ...

display

    Write to the test station display. No text is returned. The first option must be a command:

        clear       - clear the screen to specified background color
        image       - display image posted on stdin, or colorbars if none
        text        - clear display to bg color and write posted text with fg
                      color (posted on stdin)
    
    Other options are:

        fg=color    - define foreground color text, default white.
        bg=color    - define background color for clear, image, or text,
                      default black.
        size=N      - pointsize for text, default 20 (note one point per pixel)
        align=dir   - screen text alignment, one of: nw, n, ne, w, c, e, sw, s,
                      or se. Default "nw".
        mono        - use monospaced font (the default)
        prop        - use proportional font
        badge       - short for "size=80 align=c prop"
        
    Example:

        # Show arbitrary text
        $ cat file.txt | curl --data-binary @- -qf 'https://192.168.111.1/display?text'

        # show a status message
        $ echo TEST PASS | curl --data-binary @- -qf 'https://192.168.111.1/display?text&bg=white&fg=green&size=40&align=center'

        # Show a PNG image
        $ curl --binary-data @image.png -qf 'https://192.168.111.1/display?image&bg=white'

        # Show colorbars
        $ curl -qf 'https://192./168.111.1/display?image'

factory
    
    Return the factory server address and CGI port. This is the mechanism used
    by DUT to determine that it is, in fact, in the factory environment.

    Example:

        $ curl -qf 'https://192./168.111.1/factory'
        10.1.2.3:443

gpio

    Control GPIOs on the test controller.

    Options are:

        G=0         - enable gpio G and set it to output low
        G=1         - enable gpio G and set to output high
        G=in        - enable gpio G and set it as an input
        G=reset     - disable gpio G (so no longer owned by sysfs)
        reset       - disable all gpios
    
    Where G is the gpio number 4 to 27. After all options are processed (if
    any), list the current state of all enabled gpios.

    Example:

        $ curl -qf 'http://192.168.111.1/gpio?6=1'
        6: out 1
        
        $ curl -qf 'http://192.168.111.1/gpio?7=in'
        6: out 1
        7: in 1
        
        $ curl -qf 'http://192.168.111.1/gpio'
        6: out 1
        7: in 1

mkfm
    
    Trigger FM signal generation on GPIO 4. Returns transmit status message.

    Options are:

        freq=XXX.X  - transmit frequency in MHz, 88.1 to 107.9, default is 99.9
        tone=X      - modulation frequency in Hz, 10-8000, default is 1000
        time=X      - transmit time in seconds, 0-120, default is 30. 0 just
                      kills the current transmission. 

    Example:

        $ curl -qf 'http://192.168.111.1/mkfm?freq=100&time=5'
        Transmitting 1000 Hz on 100 MHz FM for 5 seconds

play
    
    Start video playback on HDMI, returns playback status message.

    Options are:

        video=file  - play file in the cgi/media directory, default is
                      'colorbars.mp4'.
        time=X      - play time in seconds, 0-120, default is 30. 0 just kills
                      the current playback.
        lcd         - if provided, playback is via LCD instead of HDMI

    Example:        
        
        $ curl -qf 'http://192.168.111.1/play&time=10'
        Playing /home/pi/pionic/cgi/media/colorbars.mp4 on hdmi for 10 seconds

time
    
    Return the controller's current time in epoch seconds and format MMDDhhmmYYYY.SS (in UCT).

    Example:
        
         $ curl -qf http://192.168.111.1/time
         1554235513 200504022019.13

i2c 
	
    A simple wrapper for i2cio, passes the posted command tesxt to i2cio stdin and returns hex data output, if any.

    Example:

	$ curl --data-binary @- http://192.168.111.1/i2c <<< 'd 0x21 1 w 0x44 r 2'
        0x01 0x34

    (in this case, read two bytes from hypothetical register 0x44 of hypothetical device 0x21 on bus 1)		

    See http://github.com/glitchub/i2cio for details.
