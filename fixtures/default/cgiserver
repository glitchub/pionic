#!/usr/bin/env python

# A tiny CGI server

from BaseHTTPServer import HTTPServer
from CGIHTTPServer import CGIHTTPRequestHandler
from SocketServer import ForkingMixIn
import sys, os, subprocess, select, string

# Given an url argument string with '+' and '%XX' escapes, and multiple
# arguments separated by '&', return list of decoded args with arbitrary
# whitespace and null arguments removed.
def decode(url):
    args=[]
    # split on '&'
    for arg in url.replace('+',' ').split('&'):
        # split each arg on '%'
        fields=arg.split('%')
        # replace first two hex chars of each subarg with chr
        for i in range(1,len(fields)):
            try: fields[i] = chr(int(fields[i][0:2],16))+fields[i][2:]
            except ValueError: pass
        # join the unescaped fields, delete extra whitespace
        args.append(' '.join(''.join(fields).split()))
    # return non-null args
    return filter(len, args)

class cgihandler(CGIHTTPRequestHandler):
    # Force all requests through run_cgi
    def is_cgi(self): return True

    def run_cgi(self):
        # split /cmd?args
        cmd, _, args = self.path[1:].partition('?')

        if not cmd:
            self.send_error(403, "Invalid request")
            return

        # reject bogus characters
        for c in cmd:
            if c not in string.ascii_letters+string.digits+'.-_':
                self.send_error(403, "Invalid command name %r" % cmd)
                return

        # give it a path
        cmd=os.getcwd()+'/'+cmd

        # append .cgi if needed
        if not cmd.endswith('.cgi'): cmd += '.cgi'

        # executable?
        if not os.path.isfile(cmd) or not os.access(cmd, os.X_OK):
            self.send_error(403, "No such executable %r" % cmd)
            return

        input = None
        if self.command.lower() == "post":
            # slurp up post data
            try:
                length = int(self.headers.getheader('content-length'))
                if length > 0: input = self.rfile.read(length)
            except:
                self.send_error(403, "Invalid POST input")

        # flush other input
        while select.select([self.rfile._sock], [], [], 0)[0]:
            if not self.rfile._sock.recv(1):
                break

        # execute and capture stderr/stdout
        argv = [cmd]+decode(args)
        self.log_message("Running %s", str(argv))
        env=os.environ
        env['CONTENT_LENGTH']=str(0 if input is None else len(input))
        p = subprocess.Popen(argv, stdin = subprocess.PIPE, stdout = subprocess.PIPE, stderr = subprocess.STDOUT, env=env)
        output = p.communicate(input)[0]
        p.stdout.close()
        status = p.returncode
        if status:
            # propagate error as status 500
            last = '<no output>'
            if output: last = ' '.join(output.strip().splitlines()[-1].split())
            self.log_error("%r exit %d: %s", cmd, status, last)
            self.send_response(500, "exit %d: %s" % (status, last))
        else:
            # else status 200
            self.log_message("%r OK", cmd)
            self.send_response(200, "OK")

        # anyway, pdd the output
        self.send_header("Content-type","text/plain");
        self.end_headers()
        self.wfile.write(output)

# Fork connections
class httpserver(ForkingMixIn,HTTPServer): pass

def start(chroot=None, port=8000, environ={}):
    os.chdir(chroot)                                        # change to directory
    httpserver(('',port),cgihandler).serve_forever()        # start

if __name__ == "__main__":
    usage = """
Usage:

    cgiserver chroot [port] [2> logfile]

Process HTTP requests in form 'http://host:port/name[.cgi][?param1]...&paramX]]'.

If a program 'name.cgi' exists in the specified chroot directory, then it is
executed with query params split into command line arguments. POST data, if
any, is passed on stdin.

If the program exit status is zero, the HTTP return status is "200 OK".

Otherwise the HTTP return status is "500 exit X: xxxx", where X is the exit
status and xxxx is the last line of output from the program.

In either case the program's stderr/stdout is returned as Content-Type: text/plain.

If not specified, the default port is 8000.

cgiserver writes logs to stderr, redirect as needed.

"""
    chroot = sys.argv[1]
    try:
        port = int(sys.argv[2])
    except IndexError:
        port = 8000
    start(chroot, port)
